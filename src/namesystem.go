package main

import (
	"fmt"
	"math/rand"
	"sync"
	"time"
)

// 随机生成100个名字
// 定义三个全局变量分别重复 “姓 辈分 和 名” 注意：这里生成的是三字名字.
var (
	chName = make(chan string, 100)
	chLanes = make(chan int, 5) // 存储能力为5的管道，模拟5个车道

	wg sync.WaitGroup

	//姓
	firstNames = []string{"赵", "钱", "孙", "李", "周", "吴", "郑", "王", "冯", "陈", "褚", "卫", "蒋", "沈", "韩", "杨", "朱", "秦", "尤", "许", "何", "吕", "施", "张", "孔", "曹", "严", "华", "金", "魏", "陶", "姜", "戚", "谢", "邹", "喻", "柏", "水", "窦", "章", "云", "苏", "潘", "葛", "奚", "范", "彭", "郎", "鲁", "韦", "昌", "马", "苗", "凤", "花", "方", "俞", "任", "袁", "柳", "酆", "鲍", "史", "唐", "费", "廉", "岑", "薛", "雷", "贺", "倪", "汤", "滕", "殷", "罗", "毕", "郝", "邬", "安", "常", "乐", "于", "时", "傅", "皮", "卞", "齐", "康", "伍", "余", "元", "卜", "顾", "孟", "平", "黄", "和", "穆", "萧", "尹", "姚", "邵", "湛", "汪", "祁", "毛", "禹", "狄", "米", "贝", "明", "臧", "计", "伏", "成", "戴", "谈", "宋", "茅", "庞", "熊", "纪", "舒", "屈", "项", "祝", "董", "梁", "杜", "阮", "蓝", "闵", "席", "季", "麻", "强", "贾", "路", "娄", "危", "江", "童", "颜", "郭", "梅", "盛", "林", "刁", "钟", "丘", "徐", "邱", "骆", "高", "夏", "蔡", "田", "樊", "胡", "凌", "霍", "虞", "万", "支", "柯", "昝", "管", "卢", "莫", "经", "房", "裘", "缪", "干", "解", "应", "宗", "丁", "宣", "贲", "邓", "单", "杭", "洪", "包", "诸", "左", "石", "崔", "吉", "钮", "龚", "程", "嵇", "邢", "滑", "裴", "陆", "荣", "翁", "荀", "羊", "於", "惠", "甄", "曲", "家", "封", "芮", "羿", "储", "靳", "汲", "邴", "糜", "松", "井", "段", "富", "巫", "乌", "焦", "巴", "弓", "牧", "隗", "山", "谷", "车", "侯", "宓", "蓬", "全", "郗", "班", "仰", "秋", "仲", "伊", "宫", "宁", "仇", "栾", "暴", "甘", "钭", "厉", "戎", "祖", "武", "符", "刘", "景", "詹", "束", "龙", "叶", "幸", "司", "韶", "郜", "黎", "蓟", "薄", "印", "宿", "白", "怀", "蒲", "台", "从", "鄂", "索", "咸", "籍", "赖", "卓", "蔺", "屠", "蒙", "池", "乔", "阴", "郁", "胥", "能", "苍", "双", "闻", "莘", "党", "翟", "谭", "贡", "劳", "逢", "逄", "姬", "申", "扶", "堵", "冉", "宰", "郦", "雍", "郤", "璩", "桑", "桂", "濮", "牛", "寿", "通", "边", "扈", "燕", "冀", "郏", "浦", "尚", "农", "温", "别", "庄", "晏", "柴", "瞿", "阎", "充", "慕", "连", "茹", "习", "宦", "艾", "鱼", "容", "向", "古", "易", "慎", "戈", "廖", "庚", "终", "暨", "居", "衡", "步", "都", "耿", "满", "弘", "匡", "国", "文", "寇", "广", "禄", "阙", "东", "欧", "殳", "沃", "利", "蔚", "越", "夔", "隆", "师", "巩", "厍", "聂", "晁", "勾", "敖", "融", "冷", "訾", "辛", "阚", "那", "简", "饶", "空", "曾", "毋", "沙", "乜", "养", "鞠", "须", "丰", "巢", "关", "蒯", "相", "查", "荆", "红", "游", "竺", "权", "逯", "盖", "益", "桓", "公", "万", "俟", "司马", "上官", "欧阳", "夏侯", "诸葛", "闻人", "东方", "赫", "连", "皇甫", "尉迟", "公羊", "澹台", "公", "冶", "宗", "政", "濮阳", "淳于", "单于", "太叔", "申屠", "公孙", "仲孙", "轩辕", "令狐", "钟离", "宇文", "长孙", "慕容", "鲜于", "闾丘", "司徒", "司空", "亓", "官司", "寇仉", "督子", "车颛", "孙端", "木巫", "马公", "西漆", "雕乐", "正壤", "驷公", "良拓", "拔夹", "谷宰", "父谷", "粱", "晋", "楚", "阎", "法", "汝", "鄢", "涂", "钦", "段干", "百里", "东郭", "南门", "呼延", "归海", "羊舌", "微生", "岳帅", "缑亢", "况后", "有琴", "梁丘", "左丘", "东门", "西门", "商牟", "佘佴", "伯赏", "南宫", "墨哈", "谯笪", "年爱", "阳佟", "第五", "言福"}
	//辈分
	middleNames = map[string][]string{}
	//名
	lastNames = []string{"天","地","玄","黄","宇","宙","洪","荒","日","月","盈","昃","辰","宿","列","张","寒","来","暑","往","秋","收","冬","藏","闰","余","成","岁","律","吕","调","阳","云","腾","致","雨","露","结","为","霜","金","生","丽","水","玉","出","昆","冈","剑","号","巨","阙","珠","称","夜","光","果","珍","李","柰","菜","重","芥","姜","海","咸","河","淡","鳞","潜","羽","翔","龙","师","火","帝","鸟","官","人","皇","始","制","文","字","乃","服","衣","裳","推","位","让","国","有","虞","陶","唐","吊","民","伐","罪","周","发","殷","汤","坐","朝","问","道","垂","拱","平","章","爱","育","黎","首","臣","伏","戎","羌","遐","迩","壹","体","率","宾","归","王","鸣","凤","在","竹","白","驹","食","场","化","被","草","木","赖","及","万","方","盖","此","身","发","四","大","五","常","恭","惟","鞠","养","岂","敢","毁","伤","女","慕","贞","男","效","才","良","知","过","必","改","得","能","莫","忘","罔","谈","彼","短"}
)

// 定义init函数, 初始化 MiddleNames
func init() {
	for _ ,firstName := range firstNames{
		if firstName != "段"{
			middleNames[firstName] = []string{"子","广","佑","钦","德","治","宗","国","志","永","映","芳","厚","铭","增","同","凤","新","继","承","全","义","建","家","业","守","正","济","世","经","福","德","碧","大","朝","廷","的","山","东","青","州","到","广","西","德","惟","从","世","令","子","们","师","希","与","盂","由","宜","顺","溥","纲","鼎","建","存","忠","厚","礼","义","谦","和","勖","永","循","元","允","宗","仲","士","丕","善","汝","崇","秘","良","友","季","同","厚","本","懋","谦","思","尚","实","式","景","均","宁","庆","以","充"}
		}else {
			middleNames[firstName] = []string{"国","振","际","培","可","士","英","志","书","远","明","其","思","为","以","宗","守","芳","尚","之","子","应","祖","永","崇","德","泽","远","立","本","起","鸿","壬","申","昌","延","祥","自","吉","泰","绍","绪","振","先","声","允","佩","前","人","训","常","储","后","代","英","京","兆","蟠","基","茂","人","文","世","泽","诗","书","隆","道","德","俊","秀","振","宗","声"}
		}
	}
}

func main()  {

	for i := 0; i < 100; i++{
		chName <- GetRandomName()
	}
	close(chName) // 目前通道中有100 个人
	for name := range chName{
		// 参加考试
		wg.Add(1)
		go TakeExam(name)
	}
	wg.Wait()
	fmt.Println("考试完毕")
}

// 考试
func TakeExam(name string){
	// 目前只有5个车道， 同时只能有5个人考试
	chLanes <- 123
	fmt.Println(name,": 正在考试...")
	<-time.After(1*time.Second)
	<-chLanes
	wg.Done()
}
// 随机生成名字
func GetRandomName()(name string){
	firstName := firstNames[GetRandomInt(0,len(firstNames)-1)]
	middleName := middleNames[firstName][GetRandomInt(0, len(middleNames[firstName])-1)]
	lastName := lastNames[GetRandomInt(0,len(lastNames)-1)]

	return firstName + middleName + lastName
}
// 获取随机数 [start, end]
func GetRandomInt(start, end int) int{
	<- time.After(1*time.Nanosecond) //这里解决随机数睡觉的问题
	r := rand.New(rand.NewSource(time.Now().UnixNano()))
	n := start + r.Intn(end - start +1)
	return n
}